<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Gestor de Tareas</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <header class="main-header">
        <nav>
            <h1>Gestor de Tareas</h1>
            <div class="user-menu">
                <span id="username"></span>
                <button id="logoutBtn" class="btn-secondary">
                    <i class="fas fa-sign-out-alt"></i> Cerrar Sesión
                </button>
            </div>
        </nav>
    </header>

    <main class="dashboard-container">
        <aside class="sidebar">
            <div class="sidebar-header">
                <h2>Mis Listas</h2>
                <button id="newListBtn" class="btn-primary">
                    <i class="fas fa-plus"></i> Nueva Lista
                </button>
            </div>
            <div id="listContainer" class="list-container">
                <!-- Las listas se cargarán aquí dinámicamente -->
            </div>
        </aside>

        <section class="main-content">
            <div id="taskContainer" class="task-container">
                <div class="welcome-message" id="welcomeMessage">
                    <h2>Bienvenido a tu Gestor de Tareas</h2>
                    <p>Selecciona una lista o crea una nueva para comenzar</p>
                </div>
                <div id="listContent" class="list-content" style="display: none;">
                    <div class="list-header">
                        <h2 id="listTitle"></h2>
                        <div class="list-actions">
                            <button id="newTaskBtn" class="btn-primary">
                                <i class="fas fa-plus"></i> Nueva Tarea
                            </button>
                            <button id="shareListBtn" class="btn-secondary">
                                <i class="fas fa-share"></i> Compartir
                            </button>
                            <button id="editListBtn" class="btn-secondary">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button id="deleteListBtn" class="btn-secondary">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div id="taskList" class="task-list">
                        <!-- Las tareas se cargarán aquí dinámicamente -->
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Modal para nueva lista -->
    <div id="listModal" class="modal">
        <div class="modal-content">
            <h3 id="listModalTitle">Nueva Lista</h3>
            <form id="listForm">
                <input type="hidden" id="listId">
                <div class="form-group">
                    <label for="listTitleInput">Título</label>
                    <input type="text" id="listTitleInput" name="title" required>
                </div>
                <div class="form-group">
                    <label for="listDescription">Descripción</label>
                    <textarea id="listDescription" name="description"></textarea>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="closeModal('listModal')">Cancelar</button>
                    <button type="submit" class="btn-primary">Guardar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal para nueva tarea -->
    <div id="taskModal" class="modal">
        <div class="modal-content">
            <h3 id="taskModalTitle">Nueva Tarea</h3>
            <form id="taskForm">
                <input type="hidden" id="taskId">
                <div class="form-group">
                    <label for="taskTitleInput">Título</label>
                    <input type="text" id="taskTitleInput" name="title" required>
                </div>
                <div class="form-group">
                    <label for="taskDescription">Descripción</label>
                    <textarea id="taskDescription" name="description"></textarea>
                </div>
                <div class="form-group">
                    <label for="taskDueDate">Fecha límite</label>
                    <input type="datetime-local" id="taskDueDate" name="dueDate">
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="closeModal('taskModal')">Cancelar</button>
                    <button type="submit" class="btn-primary">Guardar</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let currentListId = null;

        // Cargar información del usuario
        async function loadUserInfo() {
            try {
                const response = await fetch('/api/users/me');
                if (response.ok) {
                    const { user } = await response.json();
                    document.getElementById('username').textContent = user.username;
                }
            } catch (error) {
                console.error('Error al cargar información del usuario:', error);
            }
        }

        // Cargar listas
        async function loadLists() {
            try {
                const response = await fetch('/api/lists');
                if (response.ok) {
                    const { lists } = await response.json();
                    const container = document.getElementById('listContainer');
                    container.innerHTML = '';
                    
                    lists.forEach(list => {
                        const listElement = document.createElement('div');
                        listElement.className = 'list-item';
                        listElement.innerHTML = `
                            <span class="list-item-title">${list.title}</span>
                            <span class="list-item-count">0 tareas</span>
                        `;
                        listElement.onclick = () => loadList(list.id);
                        container.appendChild(listElement);
                    });
                }
            } catch (error) {
                console.error('Error al cargar listas:', error);
            }
        }

        // Cargar una lista específica
        async function loadList(listId) {
            try {
                const response = await fetch(`/api/lists/${listId}`);
                if (response.ok) {
                    const { list, tasks } = await response.json();
                    currentListId = list.id;
                    
                    document.getElementById('welcomeMessage').style.display = 'none';
                    document.getElementById('listContent').style.display = 'block';
                    document.getElementById('listTitle').textContent = list.title;
                    
                    const taskList = document.getElementById('taskList');
                    taskList.innerHTML = '';
                    
                    tasks.forEach(task => {
                        const taskElement = document.createElement('div');
                        taskElement.className = `task-item ${task.status}`;
                        taskElement.innerHTML = `
                            <div class="task-header">
                                <input type="checkbox" ${task.status === 'completed' ? 'checked' : ''} 
                                       onchange="updateTaskStatus(${task.id}, this.checked)">
                                <span class="task-title">${task.title}</span>
                            </div>
                            <div class="task-actions">
                                <button onclick="editTask(${task.id})" class="btn-icon">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button onclick="deleteTask(${task.id})" class="btn-icon">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        `;
                        taskList.appendChild(taskElement);
                    });
                }
            } catch (error) {
                console.error('Error al cargar lista:', error);
            }
        }

        // Crear o actualizar lista
        document.getElementById('listForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const listId = document.getElementById('listId').value;
            const title = document.getElementById('listTitleInput').value;
            const description = document.getElementById('listDescription').value;
            
            try {
                const url = listId ? `/api/lists/${listId}` : '/api/lists';
                const method = listId ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ title, description })
                });
                
                if (response.ok) {
                    closeModal('listModal');
                    loadLists();
                    if (listId) {
                        loadList(listId);
                    }
                } else {
                    const data = await response.json();
                    alert(data.error);
                }
            } catch (error) {
                console.error('Error al guardar lista:', error);
                alert('Error al guardar la lista');
            }
        });

        // Crear o actualizar tarea
        document.getElementById('taskForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const taskId = document.getElementById('taskId').value;
            const title = document.getElementById('taskTitleInput').value;
            const description = document.getElementById('taskDescription').value;
            const dueDate = document.getElementById('taskDueDate').value;
            
            try {
                const url = taskId ? `/api/tasks/${taskId}` : '/api/tasks';
                const method = taskId ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        title,
                        description,
                        dueDate,
                        listId: currentListId
                    })
                });
                
                if (response.ok) {
                    closeModal('taskModal');
                    loadList(currentListId);
                } else {
                    const data = await response.json();
                    alert(data.error);
                }
            } catch (error) {
                console.error('Error al guardar tarea:', error);
                alert('Error al guardar la tarea');
            }
        });

        // Funciones para los modales
        function openModal(modalId, isEdit = false, data = null) {
            const modal = document.getElementById(modalId);
            const form = modal.querySelector('form');
            const title = modal.querySelector('h3');
            
            form.reset();
            
            if (modalId === 'listModal') {
                document.getElementById('listId').value = data ? data.id : '';
                if (data) {
                    document.getElementById('listTitleInput').value = data.title;
                    document.getElementById('listDescription').value = data.description;
                }
                title.textContent = isEdit ? 'Editar Lista' : 'Nueva Lista';
            } else if (modalId === 'taskModal') {
                document.getElementById('taskId').value = data ? data.id : '';
                if (data) {
                    document.getElementById('taskTitleInput').value = data.title;
                    document.getElementById('taskDescription').value = data.description;
                    document.getElementById('taskDueDate').value = data.due_date;
                }
                title.textContent = isEdit ? 'Editar Tarea' : 'Nueva Tarea';
            }
            
            modal.style.display = 'flex';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Event Listeners
        document.getElementById('newListBtn').addEventListener('click', () => {
            openModal('listModal');
        });

        document.getElementById('newTaskBtn').addEventListener('click', () => {
            if (!currentListId) {
                alert('Por favor, selecciona una lista primero');
                return;
            }
            openModal('taskModal');
        });

        document.getElementById('logoutBtn').addEventListener('click', async () => {
            try {
                const response = await fetch('/api/users/logout', { method: 'POST' });
                if (response.ok) {
                    window.location.href = '/';
                }
            } catch (error) {
                console.error('Error al cerrar sesión:', error);
            }
        });

        // Funciones para gestionar tareas
        async function editTask(taskId) {
            try {
                const response = await fetch(`/api/tasks/${taskId}`);
                if (response.ok) {
                    const task = await response.json();
                    openModal('taskModal', true, task);
                }
            } catch (error) {
                console.error('Error al cargar tarea:', error);
                alert('Error al cargar la tarea');
            }
        }

        async function deleteTask(taskId) {
            if (!confirm('¿Estás seguro de que deseas eliminar esta tarea?')) {
                return;
            }

            try {
                const response = await fetch(`/api/tasks/${taskId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    loadList(currentListId);
                } else {
                    const data = await response.json();
                    alert(data.error || 'Error al eliminar la tarea');
                }
            } catch (error) {
                console.error('Error al eliminar tarea:', error);
                alert('Error al eliminar la tarea');
            }
        }

        async function updateTaskStatus(taskId, completed) {
            try {
                const response = await fetch(`/api/tasks/${taskId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        status: completed ? 'completed' : 'pending'
                    })
                });

                if (response.ok) {
                    loadList(currentListId);
                } else {
                    const data = await response.json();
                    alert(data.error || 'Error al actualizar el estado de la tarea');
                }
            } catch (error) {
                console.error('Error al actualizar estado de tarea:', error);
                alert('Error al actualizar el estado de la tarea');
            }
        }

        // Inicialización
        loadUserInfo();
        loadLists();
    </script>
</body>
</html> 